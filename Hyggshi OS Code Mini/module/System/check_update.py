import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))
from module.System.Notification import show_notification, show_update_confirm

import os
import requests
import subprocess
from PyQt5.QtWidgets import QMessageBox, QApplication
from PyQt5.QtCore import QTimer

GITHUB_API_URL = "https://api.github.com/repos/Hyggshi-OS-project-center/Hyggshi-OS-Code-Mini/releases/latest"
GITHUB_CONTENTS_API_URL = "https://api.github.com/repos/Hyggshi-OS-project-center/Hyggshi-OS-Code-Mini/contents"
LOCAL_VERSION = "2025.09.17"  # ƒê·∫∑t phi√™n b·∫£n hi·ªán t·∫°i c·ªßa b·∫°n ·ªü ƒë√¢y

def download_file_from_github(file_info, save_dir="."):
    """T·∫£i file t·ª´ GitHub v·ªÅ local."""
    download_url = file_info.get("download_url")
    name = file_info.get("name")
    if not download_url or not name:
        return False
    save_path = os.path.join(save_dir, name)
    try:
        print(f"ƒêang t·∫£i: {save_path} ...")
        r = requests.get(download_url)
        r.raise_for_status()
        os.makedirs(save_dir, exist_ok=True)
        with open(save_path, "wb") as f:
            f.write(r.content)
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t: {save_path}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i {save_path}: {e}")
        return False

def update_from_github(local_dir=".", github_contents_url=None):
    """ƒê·ªá quy ki·ªÉm tra v√† c·∫≠p nh·∫≠t c√°c file m·ªõi nh·∫•t t·ª´ GitHub repo."""
    if github_contents_url is None:
        github_contents_url = GITHUB_CONTENTS_API_URL
        if local_dir != ".":
            # N·∫øu ƒë√¢y l√† subdirectory, th√™m path v√†o URL
            github_contents_url += f"/{local_dir.replace(os.sep, '/')}"
    
    print(f"\nüîÑ ƒêang ki·ªÉm tra c·∫≠p nh·∫≠t t·∫°i: {github_contents_url}")
    try:
        r = requests.get(github_contents_url, timeout=10)
        r.raise_for_status()
        files = r.json()
        
        # ƒê·∫£m b·∫£o files l√† m·ªôt list
        if not isinstance(files, list):
            print(f"‚ùå Ph·∫£n h·ªìi API kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng: {type(files)}")
            return
            
        for file_info in files:
            if file_info["type"] == "file":
                local_path = os.path.join(local_dir, file_info["name"])
                need_update = True
                
                if os.path.exists(local_path):
                    # C√≥ th·ªÉ so s√°nh SHA ·ªü ƒë√¢y n·∫øu mu·ªën t·ªëi ∆∞u
                    # local_sha = get_file_sha(local_path)
                    # if local_sha == file_info.get("sha"):
                    #     need_update = False
                    pass
                    
                if need_update:
                    download_file_from_github(file_info, local_dir)
                    
            elif file_info["type"] == "dir":
                subdir = os.path.join(local_dir, file_info["name"])
                sub_api_url = file_info["url"]
                update_from_github(subdir, sub_api_url)
                
        print(f"‚úÖ ƒê√£ ki·ªÉm tra v√† c·∫≠p nh·∫≠t xong: {local_dir}\n")
    except Exception as e:
        print(f"‚ùå L·ªói c·∫≠p nh·∫≠t t·∫°i {github_contents_url}: {e}")

def get_latest_version():
    """L·∫•y phi√™n b·∫£n m·ªõi nh·∫•t t·ª´ GitHub releases."""
    try:
        r = requests.get(GITHUB_API_URL, timeout=5)
        r.raise_for_status()
        data = r.json()  # ƒê√¢y l√† dict c·ªßa release
        return data.get("tag_name") or data.get("name")
    except Exception as e:
        print("L·ªói l·∫•y phi√™n b·∫£n m·ªõi nh·∫•t:", e)
        return None

def download_release_assets():
    """T·∫£i c√°c assets t·ª´ release m·ªõi nh·∫•t."""
    try:
        r = requests.get(GITHUB_API_URL, timeout=10)
        r.raise_for_status()
        release_data = r.json()
        
        assets = release_data.get("assets", [])
        if not assets:
            print("Kh√¥ng c√≥ assets n√†o trong release n√†y")
            return False
            
        success = True
        for asset in assets:
            asset_name = asset.get("name")
            download_url = asset.get("browser_download_url")
            
            if asset_name and download_url:
                print(f"ƒêang t·∫£i asset: {asset_name}...")
                try:
                    asset_response = requests.get(download_url)
                    asset_response.raise_for_status()
                    
                    with open(asset_name, "wb") as f:
                        f.write(asset_response.content)
                    print(f"‚úÖ ƒê√£ t·∫£i xong: {asset_name}")
                except Exception as e:
                    print(f"‚ùå L·ªói khi t·∫£i {asset_name}: {e}")
                    success = False
            else:
                print(f"‚ùå Thi·∫øu th√¥ng tin cho asset: {asset}")
                success = False
                
        return success
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i release assets: {e}")
        return False

def show_update_confirm(title, message):
    """
    Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n c·∫≠p nh·∫≠t (QMessageBox).
    Tr·∫£ v·ªÅ True n·∫øu ng∆∞·ªùi d√πng ch·ªçn ƒê·ªìng √Ω, False n·∫øu ch·ªçn Kh√¥ng.
    """
    app = QApplication.instance()
    close_app = False
    if app is None:
        app = QApplication(sys.argv)
        close_app = True
    msg = QMessageBox()
    msg.setWindowTitle(title)
    msg.setText(message)
    msg.setIcon(QMessageBox.Question)
    msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
    msg.button(QMessageBox.Yes).setText("ƒê·ªìng √Ω")
    msg.button(QMessageBox.No).setText("Kh√¥ng ƒë·ªìng √Ω")
    result = msg.exec_()
    if close_app:
        app.quit()
    return result == QMessageBox.Yes

def check_and_update():
    """Ki·ªÉm tra v√† th√¥ng b√°o n·∫øu c√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi."""
    latest = get_latest_version()
    if latest and latest != LOCAL_VERSION:
        def notify():
            if show_update_confirm("C√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi!", 
                                   f"ƒê√£ ph√°t hi·ªán b·∫£n c·∫≠p nh·∫≠t m·ªõi ({latest}). B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t kh√¥ng?"):
                # G·ªçi update.py ƒë·ªÉ c·∫≠p nh·∫≠t
                subprocess.Popen([sys.executable, "module/System/update.py"])
        # ƒê·∫£m b·∫£o ch·∫°y notify tr√™n main thread
        QTimer.singleShot(0, notify)
    else:
        print("ƒê√£ l√† phi√™n b·∫£n m·ªõi nh·∫•t.")

if __name__ == "__main__":
    from PyQt5.QtWidgets import QApplication
    import sys
    app = QApplication(sys.argv)
    check_and_update()
    sys.exit(app.exec_())

    print("=== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA V√Ä C·∫¨P NH·∫¨T T·ª™ GITHUB ===")
    
    # L·ª±a ch·ªçn 1: C·∫≠p nh·∫≠t t·ª´ source code (contents API)
    print("\n1Ô∏è‚É£ C·∫≠p nh·∫≠t t·ª´ source code...")
    update_from_github(".")
    
    # L·ª±a ch·ªçn 2: T·∫£i assets t·ª´ release (n·∫øu c√≥)
    print("\n2Ô∏è‚É£ Ki·ªÉm tra v√† t·∫£i release assets...")
    download_release_assets()
    
    # Sau khi c·∫≠p nh·∫≠t xong:
    show_update_confirm("C·∫≠p nh·∫≠t", "ƒê√£ ki·ªÉm tra v√† c·∫≠p nh·∫≠t xong t·ª´ Github!")
    print("=== ƒê√É HO√ÄN TH√ÄNH C·∫¨P NH·∫¨T ===")